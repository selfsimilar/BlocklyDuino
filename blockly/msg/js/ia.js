// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.ia');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Adder commento";
Blockly.Msg.AEROBOT_BACKWARD = "Backward";  // untranslated
Blockly.Msg.AEROBOT_CENTER = "Center";  // untranslated
Blockly.Msg.AEROBOT_DISTSENS_TITLE = "DistSensor";  // untranslated
Blockly.Msg.AEROBOT_DISTSENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_FORWARD = "Forward";  // untranslated
Blockly.Msg.AEROBOT_HELPURL = "http://affordableeducationrobot.github.io/v1.0/";  // untranslated
Blockly.Msg.AEROBOT_LEFT = "Left";  // untranslated
Blockly.Msg.AEROBOT_LIGHTSENS_TITLE = "LightSensor";  // untranslated
Blockly.Msg.AEROBOT_LIGHTSENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_LINESENS_TITLE = "LineSensor";  // untranslated
Blockly.Msg.AEROBOT_LINESENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_MOVE_TITLE = "Move";  // untranslated
Blockly.Msg.AEROBOT_MOVE_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_NONE = "None";  // untranslated
Blockly.Msg.AEROBOT_RIGHT = "Right";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_LEFT = "Left";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_RIGHT = "Right";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_TITLE = "Rotate";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_SETLED_TITLE = "SetLedColor";  // untranslated
Blockly.Msg.AEROBOT_SETLED_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_STOP = "Stop";  // untranslated
Blockly.Msg.AEROBOT_TURN_LEFT = "TurnLeft";  // untranslated
Blockly.Msg.AEROBOT_TURN_RIGHT = "TurnRight";  // untranslated
Blockly.Msg.AEROBOT_WARNING = "Need to install AERobot library";  // untranslated
Blockly.Msg.ARDUINO = "Arduino";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD = "array";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this array block.";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_HELPURL = "";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_INPUT_WITH = "create array with";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE = "item";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the array.";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_TOOLTIP = "Create a array with any number of items.";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT = "get index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT1 = "get index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT2 = "index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_HELPURL = "";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_ITEM = "in Array";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP = "";  // untranslated
Blockly.Msg.AUTH = "Per favor autorisa iste application pro permitter de salveguardar tu travalio e pro permitter que tu lo divide con alteres.";
Blockly.Msg.AUTO_SAVE_TITLE = "AutoSave";  // untranslated
Blockly.Msg.BLOCKS = "Blocks";  // untranslated
Blockly.Msg.BLUE = "Blue";  // untranslated
Blockly.Msg.BLYNK_AUTH = "Auth";  // untranslated
Blockly.Msg.BLYNK_CONNECT_TITLE = "Connectted";  // untranslated
Blockly.Msg.BLYNK_CONNECT_TOOLTIP = "Check connection";  // untranslated
Blockly.Msg.BLYNK_EMAIL_TITLE = "Send Email";  // untranslated
Blockly.Msg.BLYNK_EMAIL_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_HELPURL = "https://github.com/blynkkk/blynk-library";  // untranslated
Blockly.Msg.BLYNK_MERGE_PARAM_TITLE = "Get Merge Parameter";  // untranslated
Blockly.Msg.BLYNK_MERGE_PARAM_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_NOTIFY_TITLE = "Push Notify";  // untranslated
Blockly.Msg.BLYNK_NOTIFY_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_PARAM_TITLE = "Get Parameter";  // untranslated
Blockly.Msg.BLYNK_PARAM_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_TWEET_TITLE = "Tweet";  // untranslated
Blockly.Msg.BLYNK_TWEET_TOOPTIP = "";  // untranslated
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TITLE = "Send Virtual Value";  // untranslated
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_WRITE_TITLE = "Get Virtual Action";  // untranslated
Blockly.Msg.BLYNK_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.BUTTON_EXPORT = "Export";  // untranslated
Blockly.Msg.BUTTON_IMPORT = "Import";  // untranslated
Blockly.Msg.BUTTON_NEW = "Create New";  // untranslated
Blockly.Msg.BUTTON_OPEN = "Open";  // untranslated
Blockly.Msg.BUTTON_SAVE = "Save";  // untranslated
Blockly.Msg.CAST_NUMBER_HELPURL = "https://www.arduino.cc/en/Reference/Cast";  // untranslated
Blockly.Msg.CAST_NUMBER_TITLE = "Type Cast";  // untranslated
Blockly.Msg.CAST_NUMBER_TOOLTIP = "The cast operator translates one variable type into another and forces calculations to be performed in the cast type.";  // untranslated
Blockly.Msg.CATEGORY_ADAFRUIT = "Adafruit";  // untranslated
Blockly.Msg.CATEGORY_AEROBOT = "AERobot";  // untranslated
Blockly.Msg.CATEGORY_ANALOG = "Analog";  // untranslated
Blockly.Msg.CATEGORY_ARRAY = "Array";  // untranslated
Blockly.Msg.CATEGORY_BYLNK = "Blynk";  // untranslated
Blockly.Msg.CATEGORY_CLOUD_SERVICE = "Cloud Service";  // untranslated
Blockly.Msg.CATEGORY_DIGITAL = "Digital";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET = "Ethernet";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET_CLIENT = "Clinet";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET_INIT = "Init";  // untranslated
Blockly.Msg.CATEGORY_FUNCTIONS = "Function";  // untranslated
Blockly.Msg.CATEGORY_GROVE = "Grove";  // untranslated
Blockly.Msg.CATEGORY_GROVE_ANALOG = "Grove Analog";  // untranslated
Blockly.Msg.CATEGORY_GROVE_INPUT = "Input";  // untranslated
Blockly.Msg.CATEGORY_GROVE_LCD_RGB = "LCD RGB";  // untranslated
Blockly.Msg.CATEGORY_GROVE_MOTOR = "Grove Motor";  // untranslated
Blockly.Msg.CATEGORY_GROVE_OUTPUT = "Output";  // untranslated
Blockly.Msg.CATEGORY_GROVE_SENSOR = "Sensors";  // untranslated
Blockly.Msg.CATEGORY_I2C_MATRIX = "LED Matrix";  // untranslated
Blockly.Msg.CATEGORY_I2C_SEVENSEG = "7 Segment";  // untranslated
Blockly.Msg.CATEGORY_IFTTT = "IFTTT";  // untranslated
Blockly.Msg.CATEGORY_INITIALIZES = "Initializes";  // untranslated
Blockly.Msg.CATEGORY_INOUT = "In/Out";  // untranslated
Blockly.Msg.CATEGORY_INTERRUPTS = "Interrupts";  // untranslated
Blockly.Msg.CATEGORY_INVOLT = "involt";  // untranslated
Blockly.Msg.CATEGORY_LCD = "LCD";  // untranslated
Blockly.Msg.CATEGORY_LOGIC = "Logic";  // untranslated
Blockly.Msg.CATEGORY_LOOPS = "loops";  // untranslated
Blockly.Msg.CATEGORY_M2X = "M2X";  // untranslated
Blockly.Msg.CATEGORY_MATH = "Math";  // untranslated
Blockly.Msg.CATEGORY_MPR121 = "Capacitive Sensor";  // untranslated
Blockly.Msg.CATEGORY_NEOPIXEL = "NeoPixel";  // untranslated
Blockly.Msg.CATEGORY_OTHERS = "Others";  // untranslated
Blockly.Msg.CATEGORY_OTHER_SENSOR = "Other Sensor";  // untranslated
Blockly.Msg.CATEGORY_RGBLED = "RGBLed(ws8211)";  // untranslated
Blockly.Msg.CATEGORY_ROBOT = "Robot";  // untranslated
Blockly.Msg.CATEGORY_SERIAL = "Serial";  // untranslated
Blockly.Msg.CATEGORY_SERVO = "Servo";  // untranslated
Blockly.Msg.CATEGORY_SHIELD_BOT = "ShieldBot";  // untranslated
Blockly.Msg.CATEGORY_TEXT = "Text";  // untranslated
Blockly.Msg.CATEGORY_TIME = "Time";  // untranslated
Blockly.Msg.CATEGORY_ULTRA_SONIC = "UltraSonic";  // untranslated
Blockly.Msg.CATEGORY_VARIABLES = "Variables";  // untranslated
Blockly.Msg.CHANGE = "Change";  // untranslated
Blockly.Msg.CHANGE_LANG = "Change Language";  // untranslated
Blockly.Msg.CHANGE_VALUE_TITLE = "Cambiar valor:";
Blockly.Msg.CHAT = "Conversa con tu collaborator scribente in iste quadro!";
Blockly.Msg.COL = "Col";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Plicar blocos";
Blockly.Msg.COLLAPSE_BLOCK = "Plicar bloco";
Blockly.Msg.COLOR = "Color";  // untranslated
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "color 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "color 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "ration";
Blockly.Msg.COLOUR_BLEND_TITLE = "miscer";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Misce duo colores con un ration specificate (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://ia.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Elige un color del paletta.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "color aleatori";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Eliger un color al hasardo.";
Blockly.Msg.COLOUR_RGB_BLUE = "blau";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "rubie";
Blockly.Msg.COLOUR_RGB_TITLE = "colorar con";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crear un color con le quantitate specificate de rubie, verde e blau. Tote le valores debe esser inter 0 e 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "escappar del bucla";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continuar con le proxime iteration del bucla";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Escappar del bucla continente.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Saltar le resto de iste bucla e continuar con le proxime iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Attention: Iste bloco pote solmente esser usate in un bucla.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each for each block";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in lista";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "pro cata elemento";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Pro cata elemento in un lista, mitter lo in le variabile '%1' e exequer certe instructiones.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "de %1 a %2 per %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "contar con";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Mitter in le variabile %1 le valores ab le numero initial usque al numero final, con passos secundo le intervallo specificate, e exequer le blocos specificate.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Adder un condition al bloco \"si\".";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Adder un condition final de reserva al bloco \"si\".";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Adde, remove o reordina sectiones pro reconfigurar iste bloco \"si\".";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "si non";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "si non si";
Blockly.Msg.CONTROLS_IF_MSG_IF = "si";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si un valor es ver, exequer certe instructiones.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si un valor es ver, exequer le prime bloco de instructiones. Si non, exequer le secunde bloco de instructiones.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si le prime valor es ver, exequer le prime bloco de instructiones. Si non, si le secunde valor es ver, exequer le secunde bloco de instructiones.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si le prime valor es ver, exequer le prime bloco de instructiones. Si non, si le secunde valor es ver, exequer le secunde bloco de instructiones. Si necun del valores es ver, exequer le ultime bloco de instructiones.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "face";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeter %1 vices";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeter";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "vices";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Exequer certe instructiones plure vices.";
Blockly.Msg.CONTROLS_RETURN_HELPURL = "https://www.arduino.cc/en/Reference/Return";  // untranslated
Blockly.Msg.CONTROLS_RETURN_TITLE = "Return";  // untranslated
Blockly.Msg.CONTROLS_RETURN_TOOLTIP = "Terminate a function and return a value from a function to the calling function, if desired.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeter usque a";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeter durante que";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Durante que un valor es false, exequer certe instructiones.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Durante que un valor es ver, exequer certe instructiones.";
Blockly.Msg.CONTROLS_WHILE_HELPURL = "https://www.arduino.cc/en/Reference/While";  // untranslated
Blockly.Msg.CONTROLS_WHILE_INPUT_DO = "do";  // untranslated
Blockly.Msg.CONTROLS_WHILE_TITLE = "while";  // untranslated
Blockly.Msg.CONTROLS_WHILE_TOOLTIP = "while loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false.";  // untranslated
Blockly.Msg.COPY_BUTTON = "Clip Code";  // untranslated
Blockly.Msg.COPY_DONE = "Copy Done!";  // untranslated
Blockly.Msg.DATA_LENGTH = "Data Length";  // untranslated
Blockly.Msg.DATA_TYPE = "DataType";  // untranslated
Blockly.Msg.DELETE_ALL1 = "Delete all ";  // untranslated
Blockly.Msg.DELETE_ALL2 = " blockls?";  // untranslated
Blockly.Msg.DELETE_BLOCK = "Deler bloco";
Blockly.Msg.DELETE_X_BLOCKS = "Deler %1 blocos";
Blockly.Msg.DEVICE_ID = "DeviceID";  // untranslated
Blockly.Msg.DHT_HELPURL = "https://github.com/adafruit/DHT-sensor-library";  // untranslated
Blockly.Msg.DHT_READ_C = "Temperature C";  // untranslated
Blockly.Msg.DHT_READ_F = "Temperature F";  // untranslated
Blockly.Msg.DHT_READ_H = "Humidity %";  // untranslated
Blockly.Msg.DHT_READ_PIN = "Pin#";  // untranslated
Blockly.Msg.DHT_READ_SENSOR = "Sensor";  // untranslated
Blockly.Msg.DHT_READ_TOOLTIP = "The DHT sensors are made of two parts, a capacitive humidity sensor and a thermistor.";  // untranslated
Blockly.Msg.DHT_READ_TYPE = "Content";  // untranslated
Blockly.Msg.DHT_WARNING = "Need to install the (adafruit) DHT-sensor-library";  // untranslated
Blockly.Msg.DIALOG1_NO = "No";  // untranslated
Blockly.Msg.DIALOG1_TITLE = "Reset OK?";  // untranslated
Blockly.Msg.DIALOG1_YES = "Yes";  // untranslated
Blockly.Msg.DIALOG2_TITLE = "Filename";  // untranslated
Blockly.Msg.DIALOG3_TITLE = "can't read xml file";  // untranslated
Blockly.Msg.DIALOG4_TITLE = "Delete All Blocks?";  // untranslated
Blockly.Msg.DIALOG_BLOCK_TITLE = "Option Blocks";  // untranslated
Blockly.Msg.DIALOG_EXPORT_OK = "Close";  // untranslated
Blockly.Msg.DIALOG_IMPORT_CANCEL = "Cancel";  // untranslated
Blockly.Msg.DIALOG_IMPORT_OK = "Import";  // untranslated
Blockly.Msg.DIALOG_LANG_TITLE = "Select Language";  // untranslated
Blockly.Msg.DIALOG_SENDCHROME = "Send Sample Code for ChromeApp?";  // untranslated
Blockly.Msg.DIRECTION = "Direction";  // untranslated
Blockly.Msg.DISABLE_BLOCK = "Disactivar bloco";
Blockly.Msg.DISCARD = "discard";  // untranslated
Blockly.Msg.DO = "do";  // untranslated
Blockly.Msg.DOUBLE = "Double";  // untranslated
Blockly.Msg.DOWNLOAD_CHROME_APP = "Download Offline Editor";  // untranslated
Blockly.Msg.DROPDOWN_DISCARD = "Block discard";  // untranslated
Blockly.Msg.DROPDOWN_SAVE_AS = "Save as...";  // untranslated
Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
Blockly.Msg.ELEVATION = "Elevation";  // untranslated
Blockly.Msg.EMAIL_ADDRESS = "Address";  // untranslated
Blockly.Msg.EMAIL_BODY = "Body";  // untranslated
Blockly.Msg.EMAIL_TITLE = "Title";  // untranslated
Blockly.Msg.ENABLE_BLOCK = "Activar bloco";
Blockly.Msg.ERROR_FILENAME = "Please Entry Filename!";  // untranslated
Blockly.Msg.ERROR_FILENAME2 = "Filename ErrorFilename Error！";  // untranslated
Blockly.Msg.ERROR_PARSING_XML = "Error parsing XML";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Clinet.availalbe";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is, the amount of data that has been written to the client by the server it is connected to).";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_DHCP_TITLE = "Begin (DHCP)";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup, the Ethernet shield will automatically obtain an IP address.";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_TOOLTIP = "Initializes the ethernet library and network settings.";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data, followed by a carriage return and newline, to the server a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Clinet.Connected";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected, false if not.";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_TITLE = "Clinet.Connect";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_TITLE = "localIP";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Retruns the IP address of the Ethernet shield";  // untranslated
Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";  // untranslated
Blockly.Msg.ETHERNET_POST_DATA = "Data";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";  // untranslated
Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";  // untranslated
Blockly.Msg.ETHERNET_READ_TITLE = "Client.Read";  // untranslated
Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";  // untranslated
Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";  // untranslated
Blockly.Msg.ETHERNET_STOP_TITLE = "Client.Stop";  // untranslated
Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Disconnect from the server.";  // untranslated
Blockly.Msg.ETHERNET_VERSION_1 = "Eternet";  // untranslated
Blockly.Msg.ETHERNET_VERSION_2 = "Eternet2";  // untranslated
Blockly.Msg.ETHERNET_VERSION_V2 = "Eternet_v2";  // untranslated
Blockly.Msg.EXPAND_ALL = "Displicar blocos";
Blockly.Msg.EXPAND_BLOCK = "Displicar bloco";
Blockly.Msg.EXTERNAL_INPUTS = "Entrata externe";
Blockly.Msg.FALLING = "Falling";  // untranslated
Blockly.Msg.GO_TO_SAMPLE = "Link to Sample Code Page";  // untranslated
Blockly.Msg.GO_TO_WEB = "Link to Online Editor";  // untranslated
Blockly.Msg.GREEN = "Green";  // untranslated
Blockly.Msg.GROVE_BUTTON_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Button";  // untranslated
Blockly.Msg.GROVE_BUTTON_TITLE = "Button";  // untranslated
Blockly.Msg.GROVE_BUTTON_TOOLTIP = "Basic digital input";  // untranslated
Blockly.Msg.GROVE_BUZZER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Buzzer";  // untranslated
Blockly.Msg.GROVE_BUZZER_TITLE = "Piezo Buzzer";  // untranslated
Blockly.Msg.GROVE_BUZZER_TOOLTIP = "Emit a tone when the output is high";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_SEND_TITLE = "Send";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_SEND_TOOLTIP = "Send Data.";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_TITLE = "Infrared Emitter";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TITLE = "Check Data";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TITLE = "Received Data";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TITLE = "Begin";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TOOLTIP = "Begin";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TITLE = "Receive";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_TITLE = "Infrared Receiver";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.GROVE_LED_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LED";  // untranslated
Blockly.Msg.GROVE_LED_TITLE = "LED";  // untranslated
Blockly.Msg.GROVE_LED_TOOLTIP = "LED";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Light_Sensor";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_TITLE = "Light Sensor";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_TOOLTIP = "output Low Value in bright light. High Value is darkness.";  // untranslated
Blockly.Msg.GROVE_PIN = "PIN#";  // untranslated
Blockly.Msg.GROVE_RELAY_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Relay";  // untranslated
Blockly.Msg.GROVE_RELAY_TITLE = "Relay";  // untranslated
Blockly.Msg.GROVE_RELAY_TOOLTIP = "capable of switching a much higher voltages and currents. The maximum voltage and current that can be controlled by this module upto 250V at 10 amps.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_WARNING = "Need to install the Grove_LCD_RGB_Backlight library.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TITLE = "Clear";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LCD_RGB_Backlight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_PRINT_TITLE = "Print";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_TITLE = "LCD RGB";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Rotary_Angle_Sensor";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_TITLE = "Rotary Angle";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_TOOLTIP = "Analog output between 0 and Vcc";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Sound_Sensor";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_TITLE = "Sound Sensor";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_TOOLTIP = "Detect the sound strength of the environment";  // untranslated
Blockly.Msg.GROVE_STAT = "Stat";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Temperature_Sensor";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_TITLE = "Temporature Sensor";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_TOOLTIP = "return number of ambient temperature in ℃";  // untranslated
Blockly.Msg.GROVE_TILT_SWITCH_TITLE = "Tilt Switch";  // untranslated
Blockly.Msg.GROVE_TILT_SWITCH_TOOLTIP = "When the switch is level it is open, and when tilted, the switch closes.";  // untranslated
Blockly.Msg.GROVE_TOUCH_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Touch_Sensor";  // untranslated
Blockly.Msg.GROVE_TOUCH_TITLE = "Touch";  // untranslated
Blockly.Msg.GROVE_TOUCH_TOOLTIP = "Basic digital input";  // untranslated
Blockly.Msg.HELP = "Adjuta";
Blockly.Msg.I2C_MATRIX_ADDRESS = "Address";  // untranslated
Blockly.Msg.I2C_MATRIX_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.I2C_MATRIX_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library.";  // untranslated
Blockly.Msg.I2C_MATRIX_CLEAR = "Clear";  // untranslated
Blockly.Msg.I2C_MATRIX_DIAMETER = "Diamater";  // untranslated
Blockly.Msg.I2C_MATRIX_DOTS = "Dots";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWCIRCLE = "DrawCircle";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWCOLON = "drawColon";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWLINE = "DrawLine";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWPIXEL = "DrawPixel";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWRECT = "DrawRect";  // untranslated
Blockly.Msg.I2C_MATRIX_FILLRECT = "FillRect";  // untranslated
Blockly.Msg.I2C_MATRIX_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
Blockly.Msg.I2C_MATRIX_LED_OFF = "Led off";  // untranslated
Blockly.Msg.I2C_MATRIX_LED_ON = "Led on";  // untranslated
Blockly.Msg.I2C_MATRIX_NUM = "Num";  // untranslated
Blockly.Msg.I2C_MATRIX_POSITION = "Position";  // untranslated
Blockly.Msg.I2C_MATRIX_PRINT = "Print";  // untranslated
Blockly.Msg.I2C_MATRIX_SETCURSOR = "Cursor";  // untranslated
Blockly.Msg.I2C_MATRIX_SETROTATION = "Rotation";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTCOLOR = "TextColor";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTSIZE = "TextSize";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTWRAP = "TextWrap";  // untranslated
Blockly.Msg.I2C_MATRIX_TEXT = "text";  // untranslated
Blockly.Msg.I2C_MATRIX_TITLE = "LED Matrix";  // untranslated
Blockly.Msg.I2C_MATRIX_TYPE = "Type";  // untranslated
Blockly.Msg.I2C_MATRIX_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.I2C_MATRIX_WRITEDIGITNUM = "writeDigitNum";  // untranslated
Blockly.Msg.I2C_MATRIX_WRITEDISPLAY = "WriteDisplay";  // untranslated
Blockly.Msg.I2C_MATRIX_X = "x";  // untranslated
Blockly.Msg.I2C_MATRIX_X0 = "x0";  // untranslated
Blockly.Msg.I2C_MATRIX_X1 = "x1";  // untranslated
Blockly.Msg.I2C_MATRIX_Y = "y";  // untranslated
Blockly.Msg.I2C_MATRIX_Y0 = "y0";  // untranslated
Blockly.Msg.I2C_MATRIX_Y1 = "y1";  // untranslated
Blockly.Msg.I2C_SEVENSEG_ADDRESS = "Address";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_FALSE = "hidden";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_TRUE = "display";  // untranslated
Blockly.Msg.I2C_SEVENSEG_COLON = "Colon";  // untranslated
Blockly.Msg.I2C_SEVENSEG_DOTS = "Colon";  // untranslated
Blockly.Msg.I2C_SEVENSEG_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
Blockly.Msg.I2C_SEVENSEG_NUM = "Number";  // untranslated
Blockly.Msg.I2C_SEVENSEG_POSITION = "Position";  // untranslated
Blockly.Msg.I2C_SEVENSEG_PRINT = "Print";  // untranslated
Blockly.Msg.I2C_SEVENSEG_TITLE = "7 Segment";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WARNING = "Need to Begin blocks";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WRITEDIGITNUM = "WriteDigitNum";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WRITEDISPLAY = "WriteDisplay";  // untranslated
Blockly.Msg.IFTTT_EVENT = "Event";  // untranslated
Blockly.Msg.IFTTT_GET_URL_HELPURL = "";  // untranslated
Blockly.Msg.IFTTT_GET_URL_TITLE = "Create GET Request URL";  // untranslated
Blockly.Msg.IFTTT_GET_URL_TOOLTIP = "Create GET Request URL of IFTTT.";  // untranslated
Blockly.Msg.IFTTT_KEY = "Key";  // untranslated
Blockly.Msg.IFTTT_VALUE1 = "Value1";  // untranslated
Blockly.Msg.IFTTT_VALUE2 = "Value2";  // untranslated
Blockly.Msg.IFTTT_VALUE3 = "Value3";  // untranslated
Blockly.Msg.INDEX = "Index";  // untranslated
Blockly.Msg.INFO_FILENAME = "Filename: ";  // untranslated
Blockly.Msg.INFO_TITLE = "[no document loaded]";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_APPENDTEXT = "add setup()";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_HELPURL = "http://www.arduino.cc/en/Reference/Setup";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "The setup() function is called when a sketch starts. ";  // untranslated
Blockly.Msg.INLINE_INPUTS = "Entrata interne";
Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "AnalogRead PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "AnalogWrite PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";  // untranslated
Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "DigitalRead PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "DigitalWrite PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "Stat";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";  // untranslated
Blockly.Msg.INOUT_HIGH = "HIGH";  // untranslated
Blockly.Msg.INOUT_LOW = "LOW";  // untranslated
Blockly.Msg.INOUT_OFF = "OFF";  // untranslated
Blockly.Msg.INOUT_ON = "ON";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin#";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";  // untranslated
Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";  // untranslated
Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "tone Pin#";  // untranslated
Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";  // untranslated
Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";  // untranslated
Blockly.Msg.INTEGER = "Integer";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_HELPURL = "https://www.arduino.cc/en/Reference/AttachInterrupt";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_TITLE = "Attach Interrupt";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_TOOLTIP = "The first parameter to attachInterrupt is an interrupt number.";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_HELPURL = "https://www.arduino.cc/en/Reference/DetachInterrupt";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_TITLE = "Detach Interrupt";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_TOOLTIP = "Turns off the given interrupt.";  // untranslated
Blockly.Msg.INTERRUPTS_HELPURL = "https://www.arduino.cc/en/Reference/Interrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_HELPURL = "https://www.arduino.cc/en/Reference/NoInterrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_TITLE = "noInterrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_TOOLTIP = "Disables interrupts (you can re-enable them with interrupts()).";  // untranslated
Blockly.Msg.INTERRUPTS_TITLE = "interrupts";  // untranslated
Blockly.Msg.INTERRUPTS_TOOLTIP = "Re-enables interrupts (after they've been disabled by noInterrupts()). ";  // untranslated
Blockly.Msg.IP_ADDRESS = "IP Address";  // untranslated
Blockly.Msg.LATITUDE = "Latitude";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalAutoscroll";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.LCD_BEGIN_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalBegin";  // untranslated
Blockly.Msg.LCD_BEGIN_TITLE = "begin";  // untranslated
Blockly.Msg.LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";  // untranslated
Blockly.Msg.LCD_CLEAR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalClear";  // untranslated
Blockly.Msg.LCD_CLEAR_TITLE = "Clear";  // untranslated
Blockly.Msg.LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
Blockly.Msg.LCD_INIT_D4 = "D4";  // untranslated
Blockly.Msg.LCD_INIT_D5 = "D5";  // untranslated
Blockly.Msg.LCD_INIT_D6 = "D6";  // untranslated
Blockly.Msg.LCD_INIT_D7 = "D7";  // untranslated
Blockly.Msg.LCD_INIT_ENABLE = "enable";  // untranslated
Blockly.Msg.LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
Blockly.Msg.LCD_INIT_RS = "rs";  // untranslated
Blockly.Msg.LCD_INIT_RW = "rw";  // untranslated
Blockly.Msg.LCD_INIT_TITLE = "Pin#";  // untranslated
Blockly.Msg.LCD_INIT_TOOLTIP = "Creates a variable of type LiquidCrystal.";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalLeftToRight";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalNoAutoscroll";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.LCD_PRINT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalPrint";  // untranslated
Blockly.Msg.LCD_PRINT_TITLE = "Print";  // untranslated
Blockly.Msg.LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalRightToLeft";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
Blockly.Msg.LCD_SETCURSOR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalSetCursor";  // untranslated
Blockly.Msg.LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
Blockly.Msg.LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";  // untranslated
Blockly.Msg.LEFT = "Left";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "crear un lista vacue";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Retorna un lista, de longitude 0, sin datos.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Adde, remove o reordina sectiones pro reconfigurar iste bloco de listas.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crear lista con";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Adder un elemento al lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crear un lista con un numero qualcunque de elementos.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "prime";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "№ ab fin";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "prender";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "prender e remover";
Blockly.Msg.LISTS_GET_INDEX_LAST = "ultime";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatori";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remover";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Retorna le prime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Retorna le elemento presente al position specificate in un lista. № 1 es le ultime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Retorna le elemento presente al position specificate in un lista. № 1 es le prime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Retorna le ultime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Retorna un elemento aleatori in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Remove e retorna le prime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Remove e retorna le elemento presente al position specificate in un lista. № 1 es le ultime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Remove e retorna le elemento presente al position specificate in un lista. № 1 es le prime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Remove e retorna le ultime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Remove e retorna un elemento aleatori in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Remove le prime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Remove le elemento presente al position specificate in un lista. № 1 es le ultime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Remove le elemento presente al position specificate in un lista. № 1 es le prime elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Remove le ultime elemento in un lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Remove un elemento aleatori in un lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "usque al № ab fin";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "usque al №";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "usque al ultime";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "prender sublista ab initio";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "prender sublista ab le fin ab №";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "prender sublista ab №";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea un copia del parte specificate de un lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "cercar le prime occurrentia del elemento";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "cercar le ultime occurrentia del elemento";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Retorna le indice del prime/ultime occurrentia del elemento in le lista. Retorna 0 si le texto non es trovate.";
Blockly.Msg.LISTS_INLIST = "in lista";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 es vacue";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "longitude de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Retorna le longitude de un lista.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "crear lista con elemento %1 repetite %2 vices";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea un lista que contine le valor fornite, repetite le numero specificate de vices.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "a";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserer in";
Blockly.Msg.LISTS_SET_INDEX_SET = "mitter";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Insere le elemento al initio de un lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Insere le elemento al position specificate in un lista. № 1 es le ultime elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Insere le elemento al position specificate in un lista. № 1 es le prime elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Adjunge le elemento al fin de un lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Insere le elemento a un position aleatori in un lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Defini le valor del prime elemento in un lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Defini le valor del elemento al position specificate in un lista. № 1 es le ultime elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Defini le valor del elemento al position specificate in un lista. № 1 es le prime elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Defini le valor del ultime elemento in un lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Defini le valor de un elemento aleatori in un lista.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LISTS_TOOLTIP = "Retorna ver si le lista es vacue.";
Blockly.Msg.LOAD_XML = "Load XML";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Retorna o ver o false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "ver";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Retornar ver si le duo entratas es equal.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Retornar ver si le prime entrata es major que le secunde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Retornar ver si le prime entrata es major que o equal al secunde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Retornar ver si le prime entrata es minor que le secunde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Retornar ver si le prime entrata es minor que o equal al secunde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Retornar ver si le duo entratas non es equal.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "non %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Retornar ver si le entrata es false. Retornar false si le entrata es ver.";
Blockly.Msg.LOGIC_NULL = "nulle";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Retorna nulle.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "o";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Retornar ver si ambe entratas es ver.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Retornar ver si al minus un del entratas es ver.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "si false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "si ver";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Verificar le condition in 'test'. Si le condition es ver, retorna le valor de 'si ver'; si non, retorna le valor de 'si false'.";
Blockly.Msg.LONGITUDE = "Longitude";  // untranslated
Blockly.Msg.LOW = "Low";  // untranslated
Blockly.Msg.M2X_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.M2X_BEGIN_TOOLTIP = "Set Config.";  // untranslated
Blockly.Msg.M2X_CUSTOM_LIST_VALUE_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_DATE0_TITLE = "Start";  // untranslated
Blockly.Msg.M2X_DATE1_TITLE = "End";  // untranslated
Blockly.Msg.M2X_DELETE_VALUES_TITLE = "Delete Value";  // untranslated
Blockly.Msg.M2X_DELETE_VALUES_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_HELPURL = "https://m2x.att.com/developer/tutorials/arduino";  // untranslated
Blockly.Msg.M2X_KEY = "Access Key";  // untranslated
Blockly.Msg.M2X_LIST_VALUE_TITLE = "Get DataList";  // untranslated
Blockly.Msg.M2X_LIST_VALUE_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_LOCATION_NAME = "Location name";  // untranslated
Blockly.Msg.M2X_READ_LOCATION_TITLE = "Read Location";  // untranslated
Blockly.Msg.M2X_READ_LOCATION_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_STREAM_NAME = "Stream Name";  // untranslated
Blockly.Msg.M2X_UPDATE_LOCATION_TITLE = "Update Location";  // untranslated
Blockly.Msg.M2X_UPDATE_LOCATION_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_UPDATE_VALUE_TITLE = "Update";  // untranslated
Blockly.Msg.M2X_UPDATE_VALUE_TOOLTIP = "Update Data to M2X";  // untranslated
Blockly.Msg.MAC_ADDRESS = "Mac Address";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://ia.wikipedia.org/wiki/Arithmetica";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Retornar le summa del duo numeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Retornar le quotiente del duo numeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Retornar le differentia del duo numeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MODULO = "Return the remainder when one integer is divided by another.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Retornar le producto del duo numeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Retornar le prime numero elevate al potentia del secunde numero.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
Blockly.Msg.MATH_CHANGE_INPUT_BY = "per";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "cambiar";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Adder un numero al variabile '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";  // untranslated
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Retornar un del constantes commun: π (3,141…), e (2,718…), φ (1,618…), sqrt(2) (1,414…), sqrt(½) (0,707…) o ∞ (infinite).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "limitar %1 inter %2 e %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Limitar un numero a esser inter le limites specificate (incluse).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "es divisibile per";
Blockly.Msg.MATH_IS_EVEN = "es par";
Blockly.Msg.MATH_IS_NEGATIVE = "es negative";
Blockly.Msg.MATH_IS_ODD = "es impare";
Blockly.Msg.MATH_IS_POSITIVE = "es positive";
Blockly.Msg.MATH_IS_PRIME = "es prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Verificar si un numero es par, impare, prime, integre, positive, negative, o divisibile per un certe numero. Retorna ver o false.";
Blockly.Msg.MATH_IS_WHOLE = "es integre";
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMHIGH = "fromHigh";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMLOW = "fromLow";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_MAP = "MAP";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_TOHIGH = "toHigh";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_TOLOW = "toLow";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_VALUE = "value";  // untranslated
Blockly.Msg.MATH_MAP_HELPURL = "http://arduino.cc/en/Reference/map";  // untranslated
Blockly.Msg.MATH_MAP_TOOLTIP = "Re-maps a number from one range to another. ";  // untranslated
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
Blockly.Msg.MATH_MODULO_SYMBOL = "%";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "resto de %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Retornar le resto del division del duo numeros.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://ia.wikipedia.org/wiki/Numero";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un numero.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "media del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maximo del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimo del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modas del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento aleatori del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "deviation standard del lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "summa del lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Retornar le media arithmetic del valores numeric in le lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Retornar le numero le plus grande in le lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Retornar le numero median del lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Retornar le numero le plus parve in le lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Retornar un lista del elemento(s) le plus commun in le lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Retornar un elemento aleatori del lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Retornar le deviation standard del lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Retornar le summa de tote le numeros in le lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_POW_BASE = "Base";  // untranslated
Blockly.Msg.MATH_POW_EXP = "Exponent";  // untranslated
Blockly.Msg.MATH_POW_HELPURL = "http://arduino.cc/en/Reference/pow";  // untranslated
Blockly.Msg.MATH_POW_TITLE = "Pow";  // untranslated
Blockly.Msg.MATH_POW_TOOLTIP = "Calculates the value of a number raised to a power.";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fraction aleatori";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Retornar un fraction aleatori inter 0.0 (incluse) e 1.0 (excluse).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TITLE = "numero integre aleatori inter %1 e %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Retornar un numero integre aleatori inter le duo limites specificate, incluse.";
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MAX = "Max";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MIN = "Min";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_RANDOM = "random";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_HELPURL = "http://arduino.cc/en/Reference/Random";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_TOOLTIP = "The random function generates pseudo-random numbers.";  // untranslated
Blockly.Msg.MATH_ROUND_HELPURL = "https://ia.wikipedia.org/wiki/Rotundamento";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arrotundar";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arrotundar a infra";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arrotundar a supra";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arrotundar un numero a supra o a infra.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://ia.wikipedia.org/wiki/Radice_quadrate";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "radice quadrate";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Retornar le valor absolute de un numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Retornar e elevate al potentia del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Retornar le logarithmo natural de un numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Retornar le logarithmo in base 10 del numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Retornar le negation de un numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Retornar 10 elevate al potentia de un numero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Retornar le radice quadrate de un numero.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";  // untranslated
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Retornar le arcocosino de un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Retornar le arcosino de un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Retornar le arcotangente de un numero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Retornar le cosino de un grado (non radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Retornar le sino de un grado (non radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Retornar le tangente de un grado (non radiano).";
Blockly.Msg.ME = "Io";
Blockly.Msg.MODE = "Mode";  // untranslated
Blockly.Msg.MPR121_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.MPR121_BEGIN_TOOLTIP = "initialize the sensor";  // untranslated
Blockly.Msg.MPR121_BEGIN_WARNING = "Need to install the Adafruit_MPR121 library.";  // untranslated
Blockly.Msg.MPR121_HELPURL = "https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/wiring#download-adafruit-mpr121";  // untranslated
Blockly.Msg.MPR121_POSITION = "Position";  // untranslated
Blockly.Msg.MPR121_RELEASED_TITLE = "Released";  // untranslated
Blockly.Msg.MPR121_RELEASED_TOOLTIP = "relesed the sensor";  // untranslated
Blockly.Msg.MPR121_RESET_TITLE = "Reset";  // untranslated
Blockly.Msg.MPR121_RESET_TOOLTIP = "Reset the sensor";  // untranslated
Blockly.Msg.MPR121_TOUCHED_TITLE = "Touched";  // untranslated
Blockly.Msg.MPR121_TOUCHED_TOOLTIP = "touched the sensor";  // untranslated
Blockly.Msg.MPR121_VALUE_TITLE = "Capacitance Value";  // untranslated
Blockly.Msg.MPR121_VALUE_TOOLTIP = "value of capacitance";  // untranslated
Blockly.Msg.MPR121_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_NUM = "LED Num";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_PIN = "Pin#";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_SETTING = "Init";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW = "Show";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
Blockly.Msg.NEOPIXEL_WARNING = "Need to Begin Block.";  // untranslated
Blockly.Msg.NEW_VARIABLE = "Nove variabile...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nomine del nove variabile:";
Blockly.Msg.OFF = "Off";  // untranslated
Blockly.Msg.ON = "On";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PIN = "Pin";  // untranslated
Blockly.Msg.POPUP_SAVE_DONE = "Save Done";  // untranslated
Blockly.Msg.PORT = "Port";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitter declarationes";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "con:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Executar le function '%1' definite per le usator.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Executar le function '%1' definite per le usator e usar su resultato.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "con:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Crear '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "facer qualcosa";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "pro";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea un function que non retorna un valor.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retornar";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea un function que retorna un valor.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Attention: Iste function ha parametros duplicate.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Accentuar le definition del function";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si un valor es ver, alora retornar un secunde valor.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Attention: Iste bloco pote solmente esser usate in le definition de un function.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nomine del entrata:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Adder un entrata al function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entratas";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Adder, remover o reordinar le entratas pro iste function.";
Blockly.Msg.RANGE_TITLE = "Interval (min)";  // untranslated
Blockly.Msg.RE = "re";  // untranslated
Blockly.Msg.REBOOT = "Please Reboot";  // untranslated
Blockly.Msg.RED = "Red";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Remover commento";
Blockly.Msg.RENAME_VARIABLE = "Renominar variabile...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renominar tote le variabiles '%1' a:";
Blockly.Msg.REPLACE_TEXT1 = "Replace existing blocks?";  // untranslated
Blockly.Msg.REPLACE_TEXT2 = "[Cancel] will merge.";  // untranslated
Blockly.Msg.RGBLED_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
Blockly.Msg.RGBLED_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_BEGIN_NUM = "LED Num";  // untranslated
Blockly.Msg.RGBLED_BEGIN_PIN = "Pin#";  // untranslated
Blockly.Msg.RGBLED_BEGIN_SETTING = "Init";  // untranslated
Blockly.Msg.RGBLED_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
Blockly.Msg.RGBLED_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
Blockly.Msg.RGBLED_SHOW = "Show";  // untranslated
Blockly.Msg.RGBLED_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
Blockly.Msg.RGBLED_WARNING = "Need to Begin Block.";  // untranslated
Blockly.Msg.RIGHT = "Right";  // untranslated
Blockly.Msg.RISING = "Rising";  // untranslated
Blockly.Msg.ROW = "Row";  // untranslated
Blockly.Msg.SAVE_XML = "Save XML";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial Available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";  // untranslated
Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial Read";  // untranslated
Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";  // untranslated
Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";  // untranslated
Blockly.Msg.SERVER = "Server";  // untranslated
Blockly.Msg.SERVO_ANGLE_TEXT1 = "Angle";  // untranslated
Blockly.Msg.SERVO_ANGLE_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "Angle(uS)";  // untranslated
Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";  // untranslated
Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";  // untranslated
Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "Max";  // untranslated
Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "Min";  // untranslated
Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TEXT1 = "Attach Pin";  // untranslated
Blockly.Msg.SERVO_ATTACH_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";  // untranslated
Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";  // untranslated
Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";  // untranslated
Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";  // untranslated
Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";  // untranslated
Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";  // untranslated
Blockly.Msg.SERVO_READ_TEXT1 = "Read Pin";  // untranslated
Blockly.Msg.SERVO_READ_TEXT2 = "Current Angle";  // untranslated
Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";  // untranslated
Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";  // untranslated
Blockly.Msg.SERVO_WRITE_TEXT1 = "Write Pin";  // untranslated
Blockly.Msg.SERVO_WRITE_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo, controlling the shaft accordingly.";  // untranslated
Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";  // untranslated
Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo, controlling the shaft accordingly.";  // untranslated
Blockly.Msg.SETTING = "Setting";  // untranslated
Blockly.Msg.SHEILD_BOT_WARNING = "Need to install Shield Bot 1.2 library";  // untranslated
Blockly.Msg.SHIELD_BOT_BACKWARD = "Backward";  // untranslated
Blockly.Msg.SHIELD_BOT_CONTROL = "Control";  // untranslated
Blockly.Msg.SHIELD_BOT_DRIVE_TITLE = "Drive";  // untranslated
Blockly.Msg.SHIELD_BOT_DRIVE_TOOLTIP = "All purpose drive call. Calls leftMotor and rightMotor directly.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFTTOOLTIP = "Disables the left motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFT_TITLE = "FastStop(left)";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TITLE = "FastStop(right)";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TOOLTIP = "Disables the right motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_TITLE = "FastStop";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_TOOLTIP = "Disables the motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FORWARD = "Forward";  // untranslated
Blockly.Msg.SHIELD_BOT_HELPURL = "http://www.seeedstudio.com/wiki/Shield_Bot_V1.2";  // untranslated
Blockly.Msg.SHIELD_BOT_LEFT_SPEED = "Left";  // untranslated
Blockly.Msg.SHIELD_BOT_MOTOR = "Motor";  // untranslated
Blockly.Msg.SHIELD_BOT_MOTOR_TOOLTIP = "Enables the right or left motor, negative for backwards, positive for forwards.";  // untranslated
Blockly.Msg.SHIELD_BOT_MOVE_TITLE = "Move";  // untranslated
Blockly.Msg.SHIELD_BOT_MOVE_TOOLTIP = "Move Carbot.";  // untranslated
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TITLE = "Read Sensor";  // untranslated
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TOOLTIP = "Reads any of the 5 light sensors on board.";  // untranslated
Blockly.Msg.SHIELD_BOT_RIGHT_SPEED = "Right";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_LR_TOOLTIP = "Write a max speed to the left and right motor. Between 0(basically off) and 255(full speed)";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TITLE = "MotorSpeed";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TOOLTIP = "Set max speed of two motors. Between 0(basically off) and 255(full speed)";  // untranslated
Blockly.Msg.SHIELD_BOT_STOP = "Stop";  // untranslated
Blockly.Msg.SHIELD_BOT_STOPLEFT = "StopLeft";  // untranslated
Blockly.Msg.SHIELD_BOT_STOPRIGHT = "StopRight";  // untranslated
Blockly.Msg.STRING = "String";  // untranslated
Blockly.Msg.TERM = "Console";  // untranslated
Blockly.Msg.TEXT = "Text";  // untranslated
Blockly.Msg.TEXTAREA_EXPORT_LABEL = "Copy Code";  // untranslated
Blockly.Msg.TEXTAREA_IMPORT_LABEL = "Paste Code";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "adjunger texto";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "a";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Adjunger un texto al variabile '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "in minusculas";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "con Initiales Majuscule";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "in MAJUSCULAS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Retornar un copia del texto con differente majusculas/minusculas.";
Blockly.Msg.TEXT_CHARAT_FIRST = "prender le prime littera";
Blockly.Msg.TEXT_CHARAT_FROM_END = "prender ab le fin le littera №";
Blockly.Msg.TEXT_CHARAT_FROM_START1 = "get letter #";  // untranslated
Blockly.Msg.TEXT_CHARAT_FROM_START2 = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INTEXT = "in text";  // untranslated
Blockly.Msg.TEXT_CHARAT_LAST = "prender le ultime littera";
Blockly.Msg.TEXT_CHARAT_RANDOM = "prender un littera aleatori";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Retorna le littera presente al position specificate.";
Blockly.Msg.TEXT_COMMENTOUT_APPENDTEXT = "CommentOut";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_TOOLTIP = "";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Adder un elemento al texto.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unir";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Adde, remove o reordina sectiones pro reconfigurar iste bloco de texto.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "ab le fin usque al littera №";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "usque al littera №";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "usque al ultime littera";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in le texto";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "prender subcatena ab le prime littera";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "prender subcatena ab le fin ab le littera №";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "prender subcatena ab le littera №";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Retorna le parte specificate del texto.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in le texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "cercar le prime occurrentia del texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "cercar le ultime occurrentia del texto";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Retorna le indice del prime/ultime occurrentia del prime texto in le secunde texto. Retorna 0 si le texto non es trovate.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 es vacue";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Retorna ver si le texto fornite es vacue.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "crear texto con";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Crear un pecia de texto uniente un certe numero de elementos.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "longitude de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Retorna le numero de litteras (incluse spatios) in le texto fornite.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "scriber %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Scriber le texto, numero o altere valor specificate.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Peter un numero al usator.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Peter un texto al usator.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "peter un numero con le message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "peter un texto con le message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";  // untranslated
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Un littera, parola o linea de texto.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "remover spatios de ambe lateres de";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "remover spatios del sinistre latere de";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "remover spatios del dextre latere de";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Retornar un copia del texto con spatios eliminate de un extremitate o ambes.";
Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "delayMicroseconds";  // untranslated
Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";  // untranslated
Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";  // untranslated
Blockly.Msg.TIMES_DELAY_APPENDTEXT = "delay";  // untranslated
Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";  // untranslated
Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";  // untranslated
Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";  // untranslated
Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";  // untranslated
Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";  // untranslated
Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";  // untranslated
Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";  // untranslated
Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";  // untranslated
Blockly.Msg.TODAY = "Today";  // untranslated
Blockly.Msg.ULTRASONIC_DISTANCE_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_DISTANCE_TITLE = "Distance";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_TITLE = "MaxRange";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_ECHO = "Echo";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_RESET = "Reset";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TITLE = "Pin#";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TOOLTIP = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TRIG = "Trig";  // untranslated
Blockly.Msg.URL = "URL";  // untranslated
Blockly.Msg.VALUE = "Value";  // untranslated
Blockly.Msg.VARIABLE = "Variable";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "cosa";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crea 'mitter %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TAIL = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TITLE = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Retorna le valor de iste variabile.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Crear 'prender %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TAIL = "a";
Blockly.Msg.VARIABLES_SET_TITLE = "mitter";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Mitte iste variabile al valor del entrata.";
Blockly.Msg.VARIABLES_TYPE_ANY = "Any";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY = "Array int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY2D = "Array2D int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "boolean";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BYTE = "byte";  // untranslated
Blockly.Msg.VARIABLES_TYPE_CHAR = "char";  // untranslated
Blockly.Msg.VARIABLES_TYPE_COLOUR = "Colour";  // untranslated
Blockly.Msg.VARIABLES_TYPE_DOUBLE = "double";  // untranslated
Blockly.Msg.VARIABLES_TYPE_FLOAT = "float";  // untranslated
Blockly.Msg.VARIABLES_TYPE_LONG = "long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_NUMBER = "int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_STRING = "String";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_INT = "unsigned int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_LONG = "unsigned long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_VOLATILE_INT = "volatile int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_WORD = "word";  // untranslated
Blockly.Msg.XML = "XML";  // untranslated
Blockly.Msg.YELLOW = "Yellow";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;