// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.nb');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Legg til kommentar";
Blockly.Msg.AEROBOT_BACKWARD = "Backward";  // untranslated
Blockly.Msg.AEROBOT_CENTER = "Center";  // untranslated
Blockly.Msg.AEROBOT_DISTSENS_TITLE = "DistSensor";  // untranslated
Blockly.Msg.AEROBOT_DISTSENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_FORWARD = "Forward";  // untranslated
Blockly.Msg.AEROBOT_HELPURL = "http://affordableeducationrobot.github.io/v1.0/";  // untranslated
Blockly.Msg.AEROBOT_LEFT = "Left";  // untranslated
Blockly.Msg.AEROBOT_LIGHTSENS_TITLE = "LightSensor";  // untranslated
Blockly.Msg.AEROBOT_LIGHTSENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_LINESENS_TITLE = "LineSensor";  // untranslated
Blockly.Msg.AEROBOT_LINESENS_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_MOVE_TITLE = "Move";  // untranslated
Blockly.Msg.AEROBOT_MOVE_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_NONE = "None";  // untranslated
Blockly.Msg.AEROBOT_RIGHT = "Right";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_LEFT = "Left";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_RIGHT = "Right";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_TITLE = "Rotate";  // untranslated
Blockly.Msg.AEROBOT_ROTATE_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_SETLED_TITLE = "SetLedColor";  // untranslated
Blockly.Msg.AEROBOT_SETLED_TOOLTIP = "";  // untranslated
Blockly.Msg.AEROBOT_STOP = "Stop";  // untranslated
Blockly.Msg.AEROBOT_TURN_LEFT = "TurnLeft";  // untranslated
Blockly.Msg.AEROBOT_TURN_RIGHT = "TurnRight";  // untranslated
Blockly.Msg.AEROBOT_WARNING = "Need to install AERobot library";  // untranslated
Blockly.Msg.ARDUINO = "Arduino";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD = "array";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this array block.";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_HELPURL = "";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_INPUT_WITH = "create array with";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE = "item";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the array.";  // untranslated
Blockly.Msg.ARRAY_CREATE_WITH_TOOLTIP = "Create a array with any number of items.";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT = "get index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT1 = "get index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_AT2 = "index";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_HELPURL = "";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_ITEM = "in Array";  // untranslated
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP = "";  // untranslated
Blockly.Msg.AUTH = "Vennligst godkjenn at denne appen gjør det mulig for deg å lagre arbeidet slik at du kan dele det.";
Blockly.Msg.AUTO_SAVE_TITLE = "AutoSave";  // untranslated
Blockly.Msg.BLOCKS = "Blocks";  // untranslated
Blockly.Msg.BLUE = "Blue";  // untranslated
Blockly.Msg.BLYNK_AUTH = "Auth";  // untranslated
Blockly.Msg.BLYNK_CONNECT_TITLE = "Connectted";  // untranslated
Blockly.Msg.BLYNK_CONNECT_TOOLTIP = "Check connection";  // untranslated
Blockly.Msg.BLYNK_EMAIL_TITLE = "Send Email";  // untranslated
Blockly.Msg.BLYNK_EMAIL_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_HELPURL = "https://github.com/blynkkk/blynk-library";  // untranslated
Blockly.Msg.BLYNK_MERGE_PARAM_TITLE = "Get Merge Parameter";  // untranslated
Blockly.Msg.BLYNK_MERGE_PARAM_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_NOTIFY_TITLE = "Push Notify";  // untranslated
Blockly.Msg.BLYNK_NOTIFY_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_PARAM_TITLE = "Get Parameter";  // untranslated
Blockly.Msg.BLYNK_PARAM_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_TWEET_TITLE = "Tweet";  // untranslated
Blockly.Msg.BLYNK_TWEET_TOOPTIP = "";  // untranslated
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TITLE = "Send Virtual Value";  // untranslated
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.BLYNK_WRITE_TITLE = "Get Virtual Action";  // untranslated
Blockly.Msg.BLYNK_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.BUTTON_EXPORT = "Export";  // untranslated
Blockly.Msg.BUTTON_IMPORT = "Import";  // untranslated
Blockly.Msg.BUTTON_NEW = "Create New";  // untranslated
Blockly.Msg.BUTTON_OPEN = "Open";  // untranslated
Blockly.Msg.BUTTON_SAVE = "Save";  // untranslated
Blockly.Msg.CAST_NUMBER_HELPURL = "https://www.arduino.cc/en/Reference/Cast";  // untranslated
Blockly.Msg.CAST_NUMBER_TITLE = "Type Cast";  // untranslated
Blockly.Msg.CAST_NUMBER_TOOLTIP = "The cast operator translates one variable type into another and forces calculations to be performed in the cast type.";  // untranslated
Blockly.Msg.CATEGORY_ADAFRUIT = "Adafruit";  // untranslated
Blockly.Msg.CATEGORY_AEROBOT = "AERobot";  // untranslated
Blockly.Msg.CATEGORY_ANALOG = "Analog";  // untranslated
Blockly.Msg.CATEGORY_ARRAY = "Array";  // untranslated
Blockly.Msg.CATEGORY_BYLNK = "Blynk";  // untranslated
Blockly.Msg.CATEGORY_CLOUD_SERVICE = "Cloud Service";  // untranslated
Blockly.Msg.CATEGORY_DIGITAL = "Digital";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET = "Ethernet";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET_CLIENT = "Clinet";  // untranslated
Blockly.Msg.CATEGORY_ETHERNET_INIT = "Init";  // untranslated
Blockly.Msg.CATEGORY_FUNCTIONS = "Function";  // untranslated
Blockly.Msg.CATEGORY_GROVE = "Grove";  // untranslated
Blockly.Msg.CATEGORY_GROVE_ANALOG = "Grove Analog";  // untranslated
Blockly.Msg.CATEGORY_GROVE_INPUT = "Input";  // untranslated
Blockly.Msg.CATEGORY_GROVE_LCD_RGB = "LCD RGB";  // untranslated
Blockly.Msg.CATEGORY_GROVE_MOTOR = "Grove Motor";  // untranslated
Blockly.Msg.CATEGORY_GROVE_OUTPUT = "Output";  // untranslated
Blockly.Msg.CATEGORY_GROVE_SENSOR = "Sensors";  // untranslated
Blockly.Msg.CATEGORY_I2C_MATRIX = "LED Matrix";  // untranslated
Blockly.Msg.CATEGORY_I2C_SEVENSEG = "7 Segment";  // untranslated
Blockly.Msg.CATEGORY_IFTTT = "IFTTT";  // untranslated
Blockly.Msg.CATEGORY_INITIALIZES = "Initializes";  // untranslated
Blockly.Msg.CATEGORY_INOUT = "In/Out";  // untranslated
Blockly.Msg.CATEGORY_INTERRUPTS = "Interrupts";  // untranslated
Blockly.Msg.CATEGORY_INVOLT = "involt";  // untranslated
Blockly.Msg.CATEGORY_LCD = "LCD";  // untranslated
Blockly.Msg.CATEGORY_LOGIC = "Logic";  // untranslated
Blockly.Msg.CATEGORY_LOOPS = "loops";  // untranslated
Blockly.Msg.CATEGORY_M2X = "M2X";  // untranslated
Blockly.Msg.CATEGORY_MATH = "Math";  // untranslated
Blockly.Msg.CATEGORY_MPR121 = "Capacitive Sensor";  // untranslated
Blockly.Msg.CATEGORY_NEOPIXEL = "NeoPixel";  // untranslated
Blockly.Msg.CATEGORY_OTHERS = "Others";  // untranslated
Blockly.Msg.CATEGORY_OTHER_SENSOR = "Other Sensor";  // untranslated
Blockly.Msg.CATEGORY_RGBLED = "RGBLed(ws8211)";  // untranslated
Blockly.Msg.CATEGORY_ROBOT = "Robot";  // untranslated
Blockly.Msg.CATEGORY_SERIAL = "Serial";  // untranslated
Blockly.Msg.CATEGORY_SERVO = "Servo";  // untranslated
Blockly.Msg.CATEGORY_SHIELD_BOT = "ShieldBot";  // untranslated
Blockly.Msg.CATEGORY_TEXT = "Text";  // untranslated
Blockly.Msg.CATEGORY_TIME = "Time";  // untranslated
Blockly.Msg.CATEGORY_ULTRA_SONIC = "UltraSonic";  // untranslated
Blockly.Msg.CATEGORY_VARIABLES = "Variables";  // untranslated
Blockly.Msg.CHANGE = "Change";  // untranslated
Blockly.Msg.CHANGE_LANG = "Change Language";  // untranslated
Blockly.Msg.CHANGE_VALUE_TITLE = "Bytt verdi:";
Blockly.Msg.CHAT = "Chat med din medarbeider ved å skrive i dette feltet!";
Blockly.Msg.COL = "Col";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Skjul blokker";
Blockly.Msg.COLLAPSE_BLOCK = "Skjul blokk";
Blockly.Msg.COLOR = "Color";  // untranslated
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "farge 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "farge 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "forhold";
Blockly.Msg.COLOUR_BLEND_TITLE = "blande";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blander to farger sammen med et gitt forhold (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Velg en farge fra paletten.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "tilfeldig farge";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Velg en tilfeldig farge.";
Blockly.Msg.COLOUR_RGB_BLUE = "blå";
Blockly.Msg.COLOUR_RGB_GREEN = "grønn";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "rød";
Blockly.Msg.COLOUR_RGB_TITLE = "farge med";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Lag en farge med angitt verdi av rød, grønn og blå. Alle verdier må være mellom 0 og 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "bryt ut av løkken";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "fortsett med neste gjentakelse av løkken";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Bryt ut av den gjeldende løkken.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Hopp over resten av denne løkken og fortsett med neste gjentakelse.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Advarsel: Denne blokken kan kun brukes innenfor en løkke.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each for each block";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "i listen";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for hvert element";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For hvert element i en liste, angi variabelen '%1' til elementet, og deretter lag noen setninger.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "fra %1 til %2 med %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "tell med";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Ha variabel %1 ta verdiene fra start nummer til slutt nummer, telle med spesifisert intervall og lag de spesifiserte blokkene.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Legg til en betingelse til hvis blokken.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Legg til hva som skal skje hvis de andre ikke slår til.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Legg til, fjern eller flytt seksjoner i denne hvis-blokken.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "ellers";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "ellers hvis";
Blockly.Msg.CONTROLS_IF_MSG_IF = "hvis";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Hvis dette er sant, så gjør følgende.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Hvis dette er sant, så utfør den første blokken av instruksjoner. Hvis ikke, utfør den andre blokken.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Hvis det første stemmer, så utfør den første blokken av instruksjoner. Ellers, hvis det andre stemmer, utfør den andre blokken av instruksjoner.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Hvis den første verdien er sann, så utfør den første blokken med setninger. Ellers, hvis den andre verdien er sann, så utfør den andre blokken med setninger. Hvis ingen av verdiene er sanne, så utfør den siste blokken med setninger.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "gjør";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "gjenta %1 ganger";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "gjenta";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "ganger";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Gjenta noen instruksjoner flere ganger.";
Blockly.Msg.CONTROLS_RETURN_HELPURL = "https://www.arduino.cc/en/Reference/Return";  // untranslated
Blockly.Msg.CONTROLS_RETURN_TITLE = "Return";  // untranslated
Blockly.Msg.CONTROLS_RETURN_TOOLTIP = "Terminate a function and return a value from a function to the calling function, if desired.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "gjenta til";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "gjenta mens";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Så lenge et utsagn ikke stemmer, gjør noen instruksjoner.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Så lenge et utsagn stemmer, utfør noen instruksjoner.";
Blockly.Msg.CONTROLS_WHILE_HELPURL = "https://www.arduino.cc/en/Reference/While";  // untranslated
Blockly.Msg.CONTROLS_WHILE_INPUT_DO = "do";  // untranslated
Blockly.Msg.CONTROLS_WHILE_TITLE = "while";  // untranslated
Blockly.Msg.CONTROLS_WHILE_TOOLTIP = "while loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false.";  // untranslated
Blockly.Msg.COPY_BUTTON = "Clip Code";  // untranslated
Blockly.Msg.COPY_DONE = "Copy Done!";  // untranslated
Blockly.Msg.DATA_LENGTH = "Data Length";  // untranslated
Blockly.Msg.DATA_TYPE = "DataType";  // untranslated
Blockly.Msg.DELETE_ALL1 = "Delete all ";  // untranslated
Blockly.Msg.DELETE_ALL2 = " blockls?";  // untranslated
Blockly.Msg.DELETE_BLOCK = "Slett blokk";
Blockly.Msg.DELETE_X_BLOCKS = "Slett %1 blokk(er)";
Blockly.Msg.DEVICE_ID = "DeviceID";  // untranslated
Blockly.Msg.DHT_HELPURL = "https://github.com/adafruit/DHT-sensor-library";  // untranslated
Blockly.Msg.DHT_READ_C = "Temperature C";  // untranslated
Blockly.Msg.DHT_READ_F = "Temperature F";  // untranslated
Blockly.Msg.DHT_READ_H = "Humidity %";  // untranslated
Blockly.Msg.DHT_READ_PIN = "Pin#";  // untranslated
Blockly.Msg.DHT_READ_SENSOR = "Sensor";  // untranslated
Blockly.Msg.DHT_READ_TOOLTIP = "The DHT sensors are made of two parts, a capacitive humidity sensor and a thermistor.";  // untranslated
Blockly.Msg.DHT_READ_TYPE = "Content";  // untranslated
Blockly.Msg.DHT_WARNING = "Need to install the (adafruit) DHT-sensor-library";  // untranslated
Blockly.Msg.DIALOG1_NO = "No";  // untranslated
Blockly.Msg.DIALOG1_TITLE = "Reset OK?";  // untranslated
Blockly.Msg.DIALOG1_YES = "Yes";  // untranslated
Blockly.Msg.DIALOG2_TITLE = "Filename";  // untranslated
Blockly.Msg.DIALOG3_TITLE = "can't read xml file";  // untranslated
Blockly.Msg.DIALOG4_TITLE = "Delete All Blocks?";  // untranslated
Blockly.Msg.DIALOG_BLOCK_TITLE = "Option Blocks";  // untranslated
Blockly.Msg.DIALOG_EXPORT_OK = "Close";  // untranslated
Blockly.Msg.DIALOG_IMPORT_CANCEL = "Cancel";  // untranslated
Blockly.Msg.DIALOG_IMPORT_OK = "Import";  // untranslated
Blockly.Msg.DIALOG_LANG_TITLE = "Select Language";  // untranslated
Blockly.Msg.DIALOG_SENDCHROME = "Send Sample Code for ChromeApp?";  // untranslated
Blockly.Msg.DIRECTION = "Direction";  // untranslated
Blockly.Msg.DISABLE_BLOCK = "Deaktiver blokk";
Blockly.Msg.DISCARD = "discard";  // untranslated
Blockly.Msg.DO = "do";  // untranslated
Blockly.Msg.DOUBLE = "Double";  // untranslated
Blockly.Msg.DOWNLOAD_CHROME_APP = "Download Offline Editor";  // untranslated
Blockly.Msg.DROPDOWN_DISCARD = "Block discard";  // untranslated
Blockly.Msg.DROPDOWN_SAVE_AS = "Save as...";  // untranslated
Blockly.Msg.DUPLICATE_BLOCK = "duplikat";
Blockly.Msg.ELEVATION = "Elevation";  // untranslated
Blockly.Msg.EMAIL_ADDRESS = "Address";  // untranslated
Blockly.Msg.EMAIL_BODY = "Body";  // untranslated
Blockly.Msg.EMAIL_TITLE = "Title";  // untranslated
Blockly.Msg.ENABLE_BLOCK = "Aktiver blokk";
Blockly.Msg.ERROR_FILENAME = "Please Entry Filename!";  // untranslated
Blockly.Msg.ERROR_FILENAME2 = "Filename ErrorFilename Error！";  // untranslated
Blockly.Msg.ERROR_PARSING_XML = "Error parsing XML";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Clinet.availalbe";  // untranslated
Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is, the amount of data that has been written to the client by the server it is connected to).";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_DHCP_TITLE = "Begin (DHCP)";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup, the Ethernet shield will automatically obtain an IP address.";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.ETHERNET_BEGIN_TOOLTIP = "Initializes the ethernet library and network settings.";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data, followed by a carriage return and newline, to the server a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";  // untranslated
Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Clinet.Connected";  // untranslated
Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected, false if not.";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_TITLE = "Clinet.Connect";  // untranslated
Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";  // untranslated
Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_TITLE = "localIP";  // untranslated
Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Retruns the IP address of the Ethernet shield";  // untranslated
Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";  // untranslated
Blockly.Msg.ETHERNET_POST_DATA = "Data";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";  // untranslated
Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";  // untranslated
Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";  // untranslated
Blockly.Msg.ETHERNET_READ_TITLE = "Client.Read";  // untranslated
Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";  // untranslated
Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";  // untranslated
Blockly.Msg.ETHERNET_STOP_TITLE = "Client.Stop";  // untranslated
Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Disconnect from the server.";  // untranslated
Blockly.Msg.ETHERNET_VERSION_1 = "Eternet";  // untranslated
Blockly.Msg.ETHERNET_VERSION_2 = "Eternet2";  // untranslated
Blockly.Msg.ETHERNET_VERSION_V2 = "Eternet_v2";  // untranslated
Blockly.Msg.EXPAND_ALL = "Utvid blokker";
Blockly.Msg.EXPAND_BLOCK = "Utvid blokk";
Blockly.Msg.EXTERNAL_INPUTS = "Eksterne kilder";
Blockly.Msg.FALLING = "Falling";  // untranslated
Blockly.Msg.GO_TO_SAMPLE = "Link to Sample Code Page";  // untranslated
Blockly.Msg.GO_TO_WEB = "Link to Online Editor";  // untranslated
Blockly.Msg.GREEN = "Green";  // untranslated
Blockly.Msg.GROVE_BUTTON_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Button";  // untranslated
Blockly.Msg.GROVE_BUTTON_TITLE = "Button";  // untranslated
Blockly.Msg.GROVE_BUTTON_TOOLTIP = "Basic digital input";  // untranslated
Blockly.Msg.GROVE_BUZZER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Buzzer";  // untranslated
Blockly.Msg.GROVE_BUZZER_TITLE = "Piezo Buzzer";  // untranslated
Blockly.Msg.GROVE_BUZZER_TOOLTIP = "Emit a tone when the output is high";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_SEND_TITLE = "Send";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_SEND_TOOLTIP = "Send Data.";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_TITLE = "Infrared Emitter";  // untranslated
Blockly.Msg.GROVE_IR_EMITTER_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TITLE = "Check Data";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TITLE = "Received Data";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TITLE = "Begin";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TOOLTIP = "Begin";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_INIT_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TITLE = "Receive";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TOOLTIP = "";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_TITLE = "Infrared Receiver";  // untranslated
Blockly.Msg.GROVE_IR_RECEIVER_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.GROVE_LED_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LED";  // untranslated
Blockly.Msg.GROVE_LED_TITLE = "LED";  // untranslated
Blockly.Msg.GROVE_LED_TOOLTIP = "LED";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Light_Sensor";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_TITLE = "Light Sensor";  // untranslated
Blockly.Msg.GROVE_LIGHT_SENSOR_TOOLTIP = "output Low Value in bright light. High Value is darkness.";  // untranslated
Blockly.Msg.GROVE_PIN = "PIN#";  // untranslated
Blockly.Msg.GROVE_RELAY_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Relay";  // untranslated
Blockly.Msg.GROVE_RELAY_TITLE = "Relay";  // untranslated
Blockly.Msg.GROVE_RELAY_TOOLTIP = "capable of switching a much higher voltages and currents. The maximum voltage and current that can be controlled by this module upto 250V at 10 amps.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_BEGIN_WARNING = "Need to install the Grove_LCD_RGB_Backlight library.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TITLE = "Clear";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LCD_RGB_Backlight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_PRINT_TITLE = "Print";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_TITLE = "LCD RGB";  // untranslated
Blockly.Msg.GROVE_RGB_LCD_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Rotary_Angle_Sensor";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_TITLE = "Rotary Angle";  // untranslated
Blockly.Msg.GROVE_ROTARY_ANGLE_TOOLTIP = "Analog output between 0 and Vcc";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Sound_Sensor";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_TITLE = "Sound Sensor";  // untranslated
Blockly.Msg.GROVE_SOUND_SENSOR_TOOLTIP = "Detect the sound strength of the environment";  // untranslated
Blockly.Msg.GROVE_STAT = "Stat";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Temperature_Sensor";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_TITLE = "Temporature Sensor";  // untranslated
Blockly.Msg.GROVE_TEMP_SENSOR_TOOLTIP = "return number of ambient temperature in ℃";  // untranslated
Blockly.Msg.GROVE_TILT_SWITCH_TITLE = "Tilt Switch";  // untranslated
Blockly.Msg.GROVE_TILT_SWITCH_TOOLTIP = "When the switch is level it is open, and when tilted, the switch closes.";  // untranslated
Blockly.Msg.GROVE_TOUCH_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Touch_Sensor";  // untranslated
Blockly.Msg.GROVE_TOUCH_TITLE = "Touch";  // untranslated
Blockly.Msg.GROVE_TOUCH_TOOLTIP = "Basic digital input";  // untranslated
Blockly.Msg.HELP = "Hjelp";
Blockly.Msg.I2C_MATRIX_ADDRESS = "Address";  // untranslated
Blockly.Msg.I2C_MATRIX_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.I2C_MATRIX_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library.";  // untranslated
Blockly.Msg.I2C_MATRIX_CLEAR = "Clear";  // untranslated
Blockly.Msg.I2C_MATRIX_DIAMETER = "Diamater";  // untranslated
Blockly.Msg.I2C_MATRIX_DOTS = "Dots";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWCIRCLE = "DrawCircle";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWCOLON = "drawColon";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWLINE = "DrawLine";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWPIXEL = "DrawPixel";  // untranslated
Blockly.Msg.I2C_MATRIX_DRAWRECT = "DrawRect";  // untranslated
Blockly.Msg.I2C_MATRIX_FILLRECT = "FillRect";  // untranslated
Blockly.Msg.I2C_MATRIX_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
Blockly.Msg.I2C_MATRIX_LED_OFF = "Led off";  // untranslated
Blockly.Msg.I2C_MATRIX_LED_ON = "Led on";  // untranslated
Blockly.Msg.I2C_MATRIX_NUM = "Num";  // untranslated
Blockly.Msg.I2C_MATRIX_POSITION = "Position";  // untranslated
Blockly.Msg.I2C_MATRIX_PRINT = "Print";  // untranslated
Blockly.Msg.I2C_MATRIX_SETCURSOR = "Cursor";  // untranslated
Blockly.Msg.I2C_MATRIX_SETROTATION = "Rotation";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTCOLOR = "TextColor";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTSIZE = "TextSize";  // untranslated
Blockly.Msg.I2C_MATRIX_SETTEXTWRAP = "TextWrap";  // untranslated
Blockly.Msg.I2C_MATRIX_TEXT = "text";  // untranslated
Blockly.Msg.I2C_MATRIX_TITLE = "LED Matrix";  // untranslated
Blockly.Msg.I2C_MATRIX_TYPE = "Type";  // untranslated
Blockly.Msg.I2C_MATRIX_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.I2C_MATRIX_WRITEDIGITNUM = "writeDigitNum";  // untranslated
Blockly.Msg.I2C_MATRIX_WRITEDISPLAY = "WriteDisplay";  // untranslated
Blockly.Msg.I2C_MATRIX_X = "x";  // untranslated
Blockly.Msg.I2C_MATRIX_X0 = "x0";  // untranslated
Blockly.Msg.I2C_MATRIX_X1 = "x1";  // untranslated
Blockly.Msg.I2C_MATRIX_Y = "y";  // untranslated
Blockly.Msg.I2C_MATRIX_Y0 = "y0";  // untranslated
Blockly.Msg.I2C_MATRIX_Y1 = "y1";  // untranslated
Blockly.Msg.I2C_SEVENSEG_ADDRESS = "Address";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_FALSE = "hidden";  // untranslated
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_TRUE = "display";  // untranslated
Blockly.Msg.I2C_SEVENSEG_COLON = "Colon";  // untranslated
Blockly.Msg.I2C_SEVENSEG_DOTS = "Colon";  // untranslated
Blockly.Msg.I2C_SEVENSEG_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
Blockly.Msg.I2C_SEVENSEG_NUM = "Number";  // untranslated
Blockly.Msg.I2C_SEVENSEG_POSITION = "Position";  // untranslated
Blockly.Msg.I2C_SEVENSEG_PRINT = "Print";  // untranslated
Blockly.Msg.I2C_SEVENSEG_TITLE = "7 Segment";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WARNING = "Need to Begin blocks";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WRITEDIGITNUM = "WriteDigitNum";  // untranslated
Blockly.Msg.I2C_SEVENSEG_WRITEDISPLAY = "WriteDisplay";  // untranslated
Blockly.Msg.IFTTT_EVENT = "Event";  // untranslated
Blockly.Msg.IFTTT_GET_URL_HELPURL = "";  // untranslated
Blockly.Msg.IFTTT_GET_URL_TITLE = "Create GET Request URL";  // untranslated
Blockly.Msg.IFTTT_GET_URL_TOOLTIP = "Create GET Request URL of IFTTT.";  // untranslated
Blockly.Msg.IFTTT_KEY = "Key";  // untranslated
Blockly.Msg.IFTTT_VALUE1 = "Value1";  // untranslated
Blockly.Msg.IFTTT_VALUE2 = "Value2";  // untranslated
Blockly.Msg.IFTTT_VALUE3 = "Value3";  // untranslated
Blockly.Msg.INDEX = "Index";  // untranslated
Blockly.Msg.INFO_FILENAME = "Filename: ";  // untranslated
Blockly.Msg.INFO_TITLE = "[no document loaded]";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_APPENDTEXT = "add setup()";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_HELPURL = "http://www.arduino.cc/en/Reference/Setup";  // untranslated
Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "The setup() function is called when a sketch starts. ";  // untranslated
Blockly.Msg.INLINE_INPUTS = "Interne kilder";
Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "AnalogRead PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "AnalogWrite PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";  // untranslated
Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "DigitalRead PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "DigitalWrite PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "Stat";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";  // untranslated
Blockly.Msg.INOUT_HIGH = "HIGH";  // untranslated
Blockly.Msg.INOUT_LOW = "LOW";  // untranslated
Blockly.Msg.INOUT_OFF = "OFF";  // untranslated
Blockly.Msg.INOUT_ON = "ON";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin#";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";  // untranslated
Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";  // untranslated
Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "tone Pin#";  // untranslated
Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";  // untranslated
Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";  // untranslated
Blockly.Msg.INTEGER = "Integer";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_HELPURL = "https://www.arduino.cc/en/Reference/AttachInterrupt";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_TITLE = "Attach Interrupt";  // untranslated
Blockly.Msg.INTERRUPTS_ATTACH_TOOLTIP = "The first parameter to attachInterrupt is an interrupt number.";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_HELPURL = "https://www.arduino.cc/en/Reference/DetachInterrupt";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_TITLE = "Detach Interrupt";  // untranslated
Blockly.Msg.INTERRUPTS_DETACH_TOOLTIP = "Turns off the given interrupt.";  // untranslated
Blockly.Msg.INTERRUPTS_HELPURL = "https://www.arduino.cc/en/Reference/Interrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_HELPURL = "https://www.arduino.cc/en/Reference/NoInterrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_TITLE = "noInterrupts";  // untranslated
Blockly.Msg.INTERRUPTS_NO_TOOLTIP = "Disables interrupts (you can re-enable them with interrupts()).";  // untranslated
Blockly.Msg.INTERRUPTS_TITLE = "interrupts";  // untranslated
Blockly.Msg.INTERRUPTS_TOOLTIP = "Re-enables interrupts (after they've been disabled by noInterrupts()). ";  // untranslated
Blockly.Msg.IP_ADDRESS = "IP Address";  // untranslated
Blockly.Msg.LATITUDE = "Latitude";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalAutoscroll";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
Blockly.Msg.LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.LCD_BEGIN_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalBegin";  // untranslated
Blockly.Msg.LCD_BEGIN_TITLE = "begin";  // untranslated
Blockly.Msg.LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";  // untranslated
Blockly.Msg.LCD_CLEAR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalClear";  // untranslated
Blockly.Msg.LCD_CLEAR_TITLE = "Clear";  // untranslated
Blockly.Msg.LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
Blockly.Msg.LCD_INIT_D4 = "D4";  // untranslated
Blockly.Msg.LCD_INIT_D5 = "D5";  // untranslated
Blockly.Msg.LCD_INIT_D6 = "D6";  // untranslated
Blockly.Msg.LCD_INIT_D7 = "D7";  // untranslated
Blockly.Msg.LCD_INIT_ENABLE = "enable";  // untranslated
Blockly.Msg.LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
Blockly.Msg.LCD_INIT_RS = "rs";  // untranslated
Blockly.Msg.LCD_INIT_RW = "rw";  // untranslated
Blockly.Msg.LCD_INIT_TITLE = "Pin#";  // untranslated
Blockly.Msg.LCD_INIT_TOOLTIP = "Creates a variable of type LiquidCrystal.";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalLeftToRight";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
Blockly.Msg.LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalNoAutoscroll";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
Blockly.Msg.LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
Blockly.Msg.LCD_PRINT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalPrint";  // untranslated
Blockly.Msg.LCD_PRINT_TITLE = "Print";  // untranslated
Blockly.Msg.LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalRightToLeft";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
Blockly.Msg.LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
Blockly.Msg.LCD_SETCURSOR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalSetCursor";  // untranslated
Blockly.Msg.LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
Blockly.Msg.LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";  // untranslated
Blockly.Msg.LEFT = "Left";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "opprett en tom liste";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returnerer en tom liste, altså med lengde 0";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "liste";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Legg til, fjern eller endre rekkefølgen for å endre på denne delen av listen.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "lag en liste med";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Tilføy et element til listen.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Lag en liste med et vilkårlig antall elementer.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "først";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# fra slutten";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "hent";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "hent og fjern";
Blockly.Msg.LISTS_GET_INDEX_LAST = "siste";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "tilfeldig";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "fjern";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returnerer det første elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returner elementet på den angitte posisjonen i en liste. #1 er det siste elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returner elementet på den angitte posisjonen i en liste. #1 er det første elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returnerer det siste elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returnerer et tilfeldig element i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Fjerner og returnerer det første elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Fjerner og returnerer elementet ved en gitt posisjon i en liste. #1 er det siste elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Fjerner og returnerer elementet ved en gitt posisjon i en liste. #1 er det første elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Fjerner og returnerer det siste elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Fjerner og returnerer et tilfeldig element i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Fjerner det første elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Fjerner et element ved en gitt posisjon i en liste. #1 er det siste elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Fjerner et element ved en gitt posisjon i en liste. #1 er det første elementet.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Fjerner det siste elementet i en liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Fjerner et tilfeldig element i en liste.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "til # fra slutten";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "til #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "til siste";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "Hent en del av listen";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "Hent de siste # elementene";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "Hent del-listen fra #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Kopiérer en ønsket del av en liste.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "finn første forekomst av elementet";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "finn siste forekomst av elementet";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returnerer posisjonen til den første/siste forekomsten av elementet i en liste. Returnerer 0 hvis ikke funnet.";
Blockly.Msg.LISTS_INLIST = "i listen";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 er tom";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "lengden på %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returnerer lengden til en liste.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "Lag en liste hvor elementet %1 forekommer %2 ganger";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Lager en liste hvor den gitte verdien gjentas et antall ganger.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "som";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "sett inn ved";
Blockly.Msg.LISTS_SET_INDEX_SET = "sett";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Setter inn elementet i starten av en liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Setter inn elementet ved den angitte posisjonen i en liste. #1 er det siste elementet.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Setter inn elementet ved den angitte posisjonen i en liste. #1 er det første elementet.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Tilføy elementet til slutten av en liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Setter inn elementet ved en tilfeldig posisjon i en liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Angir det første elementet i en liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Setter inn elementet ved den angitte posisjonen i en liste. #1 er det siste elementet.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Setter inn elementet ved den angitte posisjonen i en liste. #1 er det første elementet.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Angir det siste elementet i en liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Angir et tilfeldig element i en liste.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LISTS_TOOLTIP = "Returnerer sann hvis listen er tom.";
Blockly.Msg.LOAD_XML = "Load XML";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "usann";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returnerer enten sann eller usann.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "sann";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Returnerer sann hvis begge inputene er like hverandre.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Returnerer sant hvis det første argumentet er større enn den andre argumentet.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Returnerer sant hvis det første argumentet er større enn eller likt det andre argumentet.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Returnerer sant hvis det første argumentet er mindre enn det andre argumentet.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Returnerer sant hvis det første argumentet er mindre enn eller likt det andre argumentet.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Returnerer sant hvis begge argumentene er ulike hverandre.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "ikke %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returnerer sant hvis argumentet er usant. Returnerer usant hvis argumentet er sant.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returnerer null.";
Blockly.Msg.LOGIC_OPERATION_AND = "og";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "eller";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Returnerer sant hvis begge argumentene er sanne.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Returnerer sant hvis minst ett av argumentene er sant.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "hvis usant";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "hvis sant";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Sjekk betingelsen i 'test'. Hvis betingelsen er sann, da returneres 'hvis sant' verdien. Hvis ikke returneres 'hvis usant' verdien.";
Blockly.Msg.LONGITUDE = "Longitude";  // untranslated
Blockly.Msg.LOW = "Low";  // untranslated
Blockly.Msg.M2X_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.M2X_BEGIN_TOOLTIP = "Set Config.";  // untranslated
Blockly.Msg.M2X_CUSTOM_LIST_VALUE_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_DATE0_TITLE = "Start";  // untranslated
Blockly.Msg.M2X_DATE1_TITLE = "End";  // untranslated
Blockly.Msg.M2X_DELETE_VALUES_TITLE = "Delete Value";  // untranslated
Blockly.Msg.M2X_DELETE_VALUES_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_HELPURL = "https://m2x.att.com/developer/tutorials/arduino";  // untranslated
Blockly.Msg.M2X_KEY = "Access Key";  // untranslated
Blockly.Msg.M2X_LIST_VALUE_TITLE = "Get DataList";  // untranslated
Blockly.Msg.M2X_LIST_VALUE_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_LOCATION_NAME = "Location name";  // untranslated
Blockly.Msg.M2X_READ_LOCATION_TITLE = "Read Location";  // untranslated
Blockly.Msg.M2X_READ_LOCATION_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_STREAM_NAME = "Stream Name";  // untranslated
Blockly.Msg.M2X_UPDATE_LOCATION_TITLE = "Update Location";  // untranslated
Blockly.Msg.M2X_UPDATE_LOCATION_TOOLTIP = "";  // untranslated
Blockly.Msg.M2X_UPDATE_VALUE_TITLE = "Update";  // untranslated
Blockly.Msg.M2X_UPDATE_VALUE_TOOLTIP = "Update Data to M2X";  // untranslated
Blockly.Msg.MAC_ADDRESS = "Mac Address";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://no.wikipedia.org/wiki/Aritmetikk";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Returnerer summen av to tall.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Returner kvotienten av to tall.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Returner differansen mellom to tall.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MODULO = "Return the remainder when one integer is divided by another.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Returner produktet av to tall.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Returner det første tallet opphøyd i den andre tallet.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "ved";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "endre";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Addere et tall til variabelen '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Returner en av felleskonstantene π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), eller ∞ (uendelig).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "begrense %1 lav %2 høy %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Begrens et tall til å være mellom de angitte grenseverdiene (inklusiv).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "er delelig med";
Blockly.Msg.MATH_IS_EVEN = "er et partall";
Blockly.Msg.MATH_IS_NEGATIVE = "er negativer negativt";
Blockly.Msg.MATH_IS_ODD = "er et oddetall";
Blockly.Msg.MATH_IS_POSITIVE = "er positivt";
Blockly.Msg.MATH_IS_PRIME = "er et primtall";
Blockly.Msg.MATH_IS_TOOLTIP = "Sjekk om et tall er et partall, oddetall, primtall, heltall, positivt, negativt, eller om det er delelig med et annet tall. Returnerer sant eller usant.";
Blockly.Msg.MATH_IS_WHOLE = "er et heltall";
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMHIGH = "fromHigh";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMLOW = "fromLow";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_MAP = "MAP";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_TOHIGH = "toHigh";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_TOLOW = "toLow";  // untranslated
Blockly.Msg.MATH_MAP_APPENDTEXT_VALUE = "value";  // untranslated
Blockly.Msg.MATH_MAP_HELPURL = "http://arduino.cc/en/Reference/map";  // untranslated
Blockly.Msg.MATH_MAP_TOOLTIP = "Re-maps a number from one range to another. ";  // untranslated
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_SYMBOL = "%";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "resten av %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Returner resten fra delingen av to tall.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "x";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Et tall.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "gjennomsnittet av listen";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maksimum av liste";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "medianen til listen";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimum av listen";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "Listens typetall";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "tilfeldig element i listen";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standardavviket til listen";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "summen av listen";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Returner det aritmetiske gjennomsnittet av tallene i listen.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Returner det største tallet i listen.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Returner listens median.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Returner det minste tallet i listen.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Returner en liste av de vanligste elementene i listen.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Returner et tilfeldig element fra listen.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Returner listens standardavvik.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Returner summen av alle tallene i listen.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_POW_BASE = "Base";  // untranslated
Blockly.Msg.MATH_POW_EXP = "Exponent";  // untranslated
Blockly.Msg.MATH_POW_HELPURL = "http://arduino.cc/en/Reference/pow";  // untranslated
Blockly.Msg.MATH_POW_TITLE = "Pow";  // untranslated
Blockly.Msg.MATH_POW_TOOLTIP = "Calculates the value of a number raised to a power.";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "tilfeldig flyttall";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Returner et tilfeldig flyttall mellom 0.0 (inkludert) og 1.0 (ikke inkludert).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "Et tilfeldig heltall mellom %1 og %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Returner et tilfeldig tall mellom de to spesifiserte grensene, inkludert de to.";
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MAX = "Max";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MIN = "Min";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_RANDOM = "random";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_HELPURL = "http://arduino.cc/en/Reference/Random";  // untranslated
Blockly.Msg.MATH_RANDOM_MAX_MIN_TOOLTIP = "The random function generates pseudo-random numbers.";  // untranslated
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "avrunding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "rund ned";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "rund opp";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Avrund et tall ned eller opp.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluttverdi";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadratrot";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Returner absoluttverdien av et tall.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Returner e opphøyd i et tall.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Returner den naturlige logaritmen til et tall.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Returner base-10 logaritmen til et tall.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Returner det negative tallet.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Returner 10 opphøyd i et tall.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Returner kvadratroten av et tall.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Returner arccosinus til et tall.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Returner arcsinus til et tall.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Returner arctangens til et tall.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Returner cosinus av en vinkel (ikke radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Returner sinus av en vinkel (ikke radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Returner tangenten av en vinkel (ikke radian).";
Blockly.Msg.ME = "Jeg";
Blockly.Msg.MODE = "Mode";  // untranslated
Blockly.Msg.MPR121_BEGIN_TITLE = "Begin";  // untranslated
Blockly.Msg.MPR121_BEGIN_TOOLTIP = "initialize the sensor";  // untranslated
Blockly.Msg.MPR121_BEGIN_WARNING = "Need to install the Adafruit_MPR121 library.";  // untranslated
Blockly.Msg.MPR121_HELPURL = "https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/wiring#download-adafruit-mpr121";  // untranslated
Blockly.Msg.MPR121_POSITION = "Position";  // untranslated
Blockly.Msg.MPR121_RELEASED_TITLE = "Released";  // untranslated
Blockly.Msg.MPR121_RELEASED_TOOLTIP = "relesed the sensor";  // untranslated
Blockly.Msg.MPR121_RESET_TITLE = "Reset";  // untranslated
Blockly.Msg.MPR121_RESET_TOOLTIP = "Reset the sensor";  // untranslated
Blockly.Msg.MPR121_TOUCHED_TITLE = "Touched";  // untranslated
Blockly.Msg.MPR121_TOUCHED_TOOLTIP = "touched the sensor";  // untranslated
Blockly.Msg.MPR121_VALUE_TITLE = "Capacitance Value";  // untranslated
Blockly.Msg.MPR121_VALUE_TOOLTIP = "value of capacitance";  // untranslated
Blockly.Msg.MPR121_WARNING = "Need to Begin block.";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_NUM = "LED Num";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_PIN = "Pin#";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_SETTING = "Init";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
Blockly.Msg.NEOPIXEL_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW = "Show";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.NEOPIXEL_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
Blockly.Msg.NEOPIXEL_WARNING = "Need to Begin Block.";  // untranslated
Blockly.Msg.NEW_VARIABLE = "Ny variabel...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nytt variabelnavn:";
Blockly.Msg.OFF = "Off";  // untranslated
Blockly.Msg.ON = "On";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PIN = "Pin";  // untranslated
Blockly.Msg.POPUP_SAVE_DONE = "Save Done";  // untranslated
Blockly.Msg.PORT = "Port";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "tillat uttalelser";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "med:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Kjør den brukerdefinerte funksjonen '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Kjør den brukerdefinerte funksjonen'%1' og bruk resultatet av den.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "med:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Opprett '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "gjør noe";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "til";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Opprett en funksjon som ikke har noe resultat.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "returner";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Oppretter en funksjon som har et resultat.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Advarsel: Denne funksjonen har duplikate parametere.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Marker funksjonsdefinisjonen";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Hvis en verdi er sann, returner da en annen verdi.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Advarsel: Denne blokken kan bare benyttes innenfor en funksjonsdefinisjon.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "Navn på parameter:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Legg til en input til funksjonen.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "parametere";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Legg til, fjern eller endre rekkefølgen på input til denne funksjonen.";
Blockly.Msg.RANGE_TITLE = "Interval (min)";  // untranslated
Blockly.Msg.RE = "re";  // untranslated
Blockly.Msg.REBOOT = "Please Reboot";  // untranslated
Blockly.Msg.RED = "Red";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Fjern kommentar";
Blockly.Msg.RENAME_VARIABLE = "Gi nytt navn til variabel...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Endre navnet til alle '%1' variabler til:";
Blockly.Msg.REPLACE_TEXT1 = "Replace existing blocks?";  // untranslated
Blockly.Msg.REPLACE_TEXT2 = "[Cancel] will merge.";  // untranslated
Blockly.Msg.RGBLED_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
Blockly.Msg.RGBLED_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_BEGIN_NUM = "LED Num";  // untranslated
Blockly.Msg.RGBLED_BEGIN_PIN = "Pin#";  // untranslated
Blockly.Msg.RGBLED_BEGIN_SETTING = "Init";  // untranslated
Blockly.Msg.RGBLED_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
Blockly.Msg.RGBLED_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
Blockly.Msg.RGBLED_SHOW = "Show";  // untranslated
Blockly.Msg.RGBLED_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
Blockly.Msg.RGBLED_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
Blockly.Msg.RGBLED_WARNING = "Need to Begin Block.";  // untranslated
Blockly.Msg.RIGHT = "Right";  // untranslated
Blockly.Msg.RISING = "Rising";  // untranslated
Blockly.Msg.ROW = "Row";  // untranslated
Blockly.Msg.SAVE_XML = "Save XML";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial Available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";  // untranslated
Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial Read";  // untranslated
Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";  // untranslated
Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";  // untranslated
Blockly.Msg.SERVER = "Server";  // untranslated
Blockly.Msg.SERVO_ANGLE_TEXT1 = "Angle";  // untranslated
Blockly.Msg.SERVO_ANGLE_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "Angle(uS)";  // untranslated
Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";  // untranslated
Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";  // untranslated
Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "Max";  // untranslated
Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "Min";  // untranslated
Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TEXT1 = "Attach Pin";  // untranslated
Blockly.Msg.SERVO_ATTACH_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";  // untranslated
Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";  // untranslated
Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";  // untranslated
Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";  // untranslated
Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";  // untranslated
Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";  // untranslated
Blockly.Msg.SERVO_READ_TEXT1 = "Read Pin";  // untranslated
Blockly.Msg.SERVO_READ_TEXT2 = "Current Angle";  // untranslated
Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";  // untranslated
Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";  // untranslated
Blockly.Msg.SERVO_WRITE_TEXT1 = "Write Pin";  // untranslated
Blockly.Msg.SERVO_WRITE_TEXT2 = "";  // untranslated
Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo, controlling the shaft accordingly.";  // untranslated
Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";  // untranslated
Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo, controlling the shaft accordingly.";  // untranslated
Blockly.Msg.SETTING = "Setting";  // untranslated
Blockly.Msg.SHEILD_BOT_WARNING = "Need to install Shield Bot 1.2 library";  // untranslated
Blockly.Msg.SHIELD_BOT_BACKWARD = "Backward";  // untranslated
Blockly.Msg.SHIELD_BOT_CONTROL = "Control";  // untranslated
Blockly.Msg.SHIELD_BOT_DRIVE_TITLE = "Drive";  // untranslated
Blockly.Msg.SHIELD_BOT_DRIVE_TOOLTIP = "All purpose drive call. Calls leftMotor and rightMotor directly.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFTTOOLTIP = "Disables the left motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFT_TITLE = "FastStop(left)";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TITLE = "FastStop(right)";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TOOLTIP = "Disables the right motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_TITLE = "FastStop";  // untranslated
Blockly.Msg.SHIELD_BOT_FASTSTOP_TOOLTIP = "Disables the motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
Blockly.Msg.SHIELD_BOT_FORWARD = "Forward";  // untranslated
Blockly.Msg.SHIELD_BOT_HELPURL = "http://www.seeedstudio.com/wiki/Shield_Bot_V1.2";  // untranslated
Blockly.Msg.SHIELD_BOT_LEFT_SPEED = "Left";  // untranslated
Blockly.Msg.SHIELD_BOT_MOTOR = "Motor";  // untranslated
Blockly.Msg.SHIELD_BOT_MOTOR_TOOLTIP = "Enables the right or left motor, negative for backwards, positive for forwards.";  // untranslated
Blockly.Msg.SHIELD_BOT_MOVE_TITLE = "Move";  // untranslated
Blockly.Msg.SHIELD_BOT_MOVE_TOOLTIP = "Move Carbot.";  // untranslated
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TITLE = "Read Sensor";  // untranslated
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TOOLTIP = "Reads any of the 5 light sensors on board.";  // untranslated
Blockly.Msg.SHIELD_BOT_RIGHT_SPEED = "Right";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_LR_TOOLTIP = "Write a max speed to the left and right motor. Between 0(basically off) and 255(full speed)";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TITLE = "MotorSpeed";  // untranslated
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TOOLTIP = "Set max speed of two motors. Between 0(basically off) and 255(full speed)";  // untranslated
Blockly.Msg.SHIELD_BOT_STOP = "Stop";  // untranslated
Blockly.Msg.SHIELD_BOT_STOPLEFT = "StopLeft";  // untranslated
Blockly.Msg.SHIELD_BOT_STOPRIGHT = "StopRight";  // untranslated
Blockly.Msg.STRING = "String";  // untranslated
Blockly.Msg.TERM = "Console";  // untranslated
Blockly.Msg.TEXT = "Text";  // untranslated
Blockly.Msg.TEXTAREA_EXPORT_LABEL = "Copy Code";  // untranslated
Blockly.Msg.TEXTAREA_IMPORT_LABEL = "Paste Code";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "tilføy tekst";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "til";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Tilføy tekst til variabelen '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "til små bokstaver";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "til store forbokstaver";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "til STORE BOKSTAVER";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Returnerer en kopi av teksten der store og små bokstaver er byttet om.";
Blockly.Msg.TEXT_CHARAT_FIRST = "hent første bokstav";
Blockly.Msg.TEXT_CHARAT_FROM_END = "hent bokstav # fra slutten";
Blockly.Msg.TEXT_CHARAT_FROM_START1 = "get letter #";  // untranslated
Blockly.Msg.TEXT_CHARAT_FROM_START2 = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INTEXT = "in text";  // untranslated
Blockly.Msg.TEXT_CHARAT_LAST = "hent den siste bokstaven";
Blockly.Msg.TEXT_CHARAT_RANDOM = "hent en tilfeldig bokstav";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returnerer bokstaven på angitt plassering.";
Blockly.Msg.TEXT_COMMENTOUT_APPENDTEXT = "CommentOut";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_TOOLTIP = "";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Legg til et element til teksten.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "føy sammen";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Legg til, fjern eller forandre rekkefølgen for å forandre på denne tekstblokken.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "til bokstav # fra slutten";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "til bokstav #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "til siste bokstav";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "i tekst";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "hent delstreng fra første bokstav";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "hent delstreng fra bokstav # fra slutten";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "hent delstreng fra bokstav #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returnerer den angitte delen av teksten.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "i tekst";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "finn første forekomst av tekst";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "finn siste forekomst av tekst";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returnerer posisjonen for første/siste forekomsten av den første tekst i den andre teksten.  Returnerer 0 hvis teksten ikke blir funnet.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 er tom";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returnerer sann hvis den angitte teksten er tom.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "lage tekst med";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Opprett en tekst ved å sette sammen et antall elementer.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "lengden av %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returnerer antall bokstaver (inkludert mellomrom) i den angitte teksten.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "skriv ut %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Skriv ut angitt tekst, tall eller annet innhold.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Be brukeren om et tall.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Spør brukeren om tekst.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "spør om et tall med en melding";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "spør om tekst med en melding";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "En bokstav, ett ord eller en linje med tekst.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "fjern mellomrom fra begge sider av";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "fjern mellomrom fra venstre side av";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "fjern mellomrom fra høyre side av";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Returner en kopi av teksten med mellomrom fjernet fra en eller begge sidene.";
Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "delayMicroseconds";  // untranslated
Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";  // untranslated
Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";  // untranslated
Blockly.Msg.TIMES_DELAY_APPENDTEXT = "delay";  // untranslated
Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";  // untranslated
Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";  // untranslated
Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";  // untranslated
Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";  // untranslated
Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";  // untranslated
Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";  // untranslated
Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";  // untranslated
Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";  // untranslated
Blockly.Msg.TODAY = "Today";  // untranslated
Blockly.Msg.ULTRASONIC_DISTANCE_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_DISTANCE_TITLE = "Distance";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_TITLE = "MaxRange";  // untranslated
Blockly.Msg.ULTRASONIC_MAXRANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_ECHO = "Echo";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_HELPURL = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_RESET = "Reset";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TITLE = "Pin#";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TOOLTIP = "";  // untranslated
Blockly.Msg.ULTRASONIC_SETTING_TRIG = "Trig";  // untranslated
Blockly.Msg.URL = "URL";  // untranslated
Blockly.Msg.VALUE = "Value";  // untranslated
Blockly.Msg.VARIABLE = "Variable";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "element";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Opprett 'sett %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returnerer verdien av denne variabelen.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Opprett 'hent %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TAIL = "til";
Blockly.Msg.VARIABLES_SET_TITLE = "sett";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Setter verdien av denne variablen lik parameteren.";
Blockly.Msg.VARIABLES_TYPE_ANY = "Any";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY = "Array int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY2D = "Array2D int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "boolean";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BYTE = "byte";  // untranslated
Blockly.Msg.VARIABLES_TYPE_CHAR = "char";  // untranslated
Blockly.Msg.VARIABLES_TYPE_COLOUR = "Colour";  // untranslated
Blockly.Msg.VARIABLES_TYPE_DOUBLE = "double";  // untranslated
Blockly.Msg.VARIABLES_TYPE_FLOAT = "float";  // untranslated
Blockly.Msg.VARIABLES_TYPE_LONG = "long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_NUMBER = "int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_STRING = "String";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_INT = "unsigned int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_LONG = "unsigned long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_VOLATILE_INT = "volatile int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_WORD = "word";  // untranslated
Blockly.Msg.XML = "XML";  // untranslated
Blockly.Msg.YELLOW = "Yellow";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;